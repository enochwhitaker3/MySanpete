@page "/business/viewvouchers"
@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@* @attribute [Authorize(Roles = "Business")]  *@
@inject IBusinessService businessService

@if (business is not null)
{
    @if (business.Vouchers is not null)
    {
        <table class="table" style="height: 100%; width: 100%;">
            <thead>
                <tr>
                    <th>Coupon Code</th>
                    <th>User Name</th>
                    <th>Voucher Type</th>
                    <th>Claim</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var userVoucher in vouchers)
                {
                    <tr>
                        <td>@userVoucher.PromoCode</td>
                        <td>@userVoucher.User.UserName</td>
                        @if (userVoucher.TotalReclaimable == null || userVoucher.TotalReclaimable == 0)
                        {
                            <td>Multi-Use</td>
                        }
                        else
                        {
                            <td>Single-Use</td>
                        }
                        <td>
                            @if (userVoucher.TotalReclaimable == null || userVoucher.TotalReclaimable == 0)
                            {
                                <input type="number" min="@(userVoucher?.TimesClaimed ?? 0)" step="1" />
                            }
                            else
                            {
                                <input type="checkbox" @bind="userVoucher.Isused" />
                            }
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    }
}

@code {
    [CascadingParameter]
    Task<AuthenticationState>? authenticationStateTask { get; set; }

    public string email { get; set; } = "";

    public Business? business { get; set; }

    List<UserVoucher> vouchers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await (authenticationStateTask ?? throw new Exception("Auth state unfound"));
        email = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("email"))?.Value ?? throw new Exception("Email missing on business");
        email = "codebras2023@gmail.com";

        business = await businessService.GetBusiness(email);

        business?.Vouchers.Select(x =>
            {
                vouchers.AddRange(x.UserVouchers);
                return x.UserVouchers;
            }).ToList();

    }
}

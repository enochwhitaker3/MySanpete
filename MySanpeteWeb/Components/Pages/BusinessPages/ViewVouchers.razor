@page "/business/viewvouchers"
@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@attribute [Authorize(Roles = "Business")]
@inject IUserVoucherService userVoucherService
@using System.Diagnostics.CodeAnalysis
@using System.Globalization

<table class="table" style="height: 100%; width: 100%;">
    <thead>
        <tr>
            <th>

                <div class="container d-flex align-items-center">
                    <span class="mr-3">Promo Code</span>

                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text bg-light rounded-left">
                                <img src="Images/MagnifyingGlass.png" alt="Search" style="width: 20px; height: 20px;" />
                            </span>
                        </div>
                        <input type="text" class="form-control rounded-right" placeholder="Search For Promo Code" @onchange="@SortByCode" />
                    </div>
                </div>
            </th>
            <th>
                <div class="container d-flex align-items-center">
                    <span class="mr-3">Username</span>

                    <div class="input-group mb-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text bg-light rounded-left">
                                <img src="Images/MagnifyingGlass.png" alt="Search" style="width: 20px; height: 20px;" />
                            </span>
                        </div>
                        <input type="text" class="form-control rounded-right" placeholder="Search For User" @onchange="@SortByUsername" />
                    </div>
                </div>
            </th>
            <th>Voucher Type</th>
            <th>Claim</th>
        </tr>
    </thead>
    <tbody>
        @if (SortedVouchers is not null)
        {

            @foreach (var userVoucher in SortedVouchers)
            {
                <tr>
                    <td>@userVoucher.Promo_Code</td>
                    <td>@userVoucher?.User?.Username</td>
                    @if (userVoucher?.Total_Reclaimable == null || userVoucher.Total_Reclaimable > 1 || userVoucher.Total_Reclaimable == 0)
                    {
                        <td>Multi-Use</td>
                    }
                    else
                    {
                        <td>Single-Use</td>
                    }
                    <td>

                        @if (userVoucher?.Total_Reclaimable == null || userVoucher.Total_Reclaimable > 1 || userVoucher.Total_Reclaimable == 0)
                        {
                            <div class="voucher-box">
                                <div class="btn-group">
                                    <button class="btn btn-primary" @onclick="() => ClaimVoucher(userVoucher!)">
                                        @(userVoucher!.Total_Reclaimable is null
                                            || userVoucher.Total_Reclaimable == 0 ? "+"
                                            : userVoucher.Times_Claimed
                                            >= userVoucher.Total_Reclaimable
                                            ? "MAX" : "+")
                                    </button>
                                </div>
                                <p class="voucher-info">@userVoucher!.Times_Claimed</p>
                                <div class="btn-group" data-toggle="modal" data-target="#ImportantPopup">
                                    <button class="btn btn-primary" @onclick="() => ConfirmUnclaim(userVoucher)">-</button>
                                </div>
                            </div>

                        }
                        else
                        {
                            <div class="voucher-box">
                                @if (userVoucher.Is_Used != null && userVoucher.Is_Used == true)
                                {
                                    <button class="btn btn-info btn-full-width" @onclick="() => ConfirmUnclaim(userVoucher)" data-toggle="modal" data-target="#ImportantPopup">Claimed</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary btn-full-width" @onclick="() => ClaimVoucher(userVoucher)">Claim?</button>
                                }
                            </div>
                        }
                    </td>
                </tr>

            }
        }
    </tbody>
</table>

<div class="modal fade" id="ImportantPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Decision</h5>
            </div>
            <div class="modal-body">
                <p>Are you sure you would like to unclaim this voucher?</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger btn-full-width" data-dismiss="modal" @onclick="UnclaimVoucher">Confirm</button>
                <button class="btn btn-success btn-full-width" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    Task<AuthenticationState>? authenticationStateTask { get; set; }

    public string email { get; set; } = "";

    public BusinessDTO? business { get; set; }


    public string codeSearch { get; set; } = "";
    public string userSearch { get; set; } = "";
    public List<UserVoucherDTO> vouchers { get; set; } = new();
    public List<UserVoucherDTO> SortedVouchers { get; set; } = new();

    private UserVoucherDTO userVoucherToUnclaim { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await (authenticationStateTask ?? throw new Exception("Auth state unfound"));
        email = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("email"))?.Value ?? throw new Exception("Email missing on business");

        vouchers = SortedVouchers = (await userVoucherService.GetAllByBusiness(email)).OrderBy(x => x.Is_Used).ToList();

    }

    private async Task ClaimVoucher(UserVoucherDTO userVoucher)
    {
        if (userVoucher.Is_Used == false)
        {
            userVoucher.Times_Claimed++;
        }

        if (userVoucher.Times_Claimed >= userVoucher.Total_Reclaimable)
        {
            userVoucher.Is_Used = true;
        }

        if (userVoucher.Total_Reclaimable is null || userVoucher.Total_Reclaimable == 0)
        {
            userVoucher.Is_Used = false;
        }

        await userVoucherService.UpdateUserVoucher(userVoucher);
    }

    private void ConfirmUnclaim(UserVoucherDTO userVoucher)
    {
        userVoucherToUnclaim = userVoucher;
    }

    private async Task UnclaimVoucher()
    {
        if (userVoucherToUnclaim.Times_Claimed > 0)
        {
            userVoucherToUnclaim.Times_Claimed--;
            userVoucherToUnclaim.Is_Used = false;
            await userVoucherService.UpdateUserVoucher(userVoucherToUnclaim);
        }

    }

    public void SortByCode(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        codeSearch = ((string)args.Value!).ToLower();

        Sort();
    }

    public void SortByUsername(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        userSearch = ((string)args.Value!).ToLower();

        Sort();
    }

    public void Sort()
    {
        SortedVouchers = vouchers.OrderByDescending(x => x!.Promo_Code!.ToLower().Contains(codeSearch)).ThenByDescending(x => x!.User!.Username!.ToLower().Contains(userSearch)).ToList();
    }
}

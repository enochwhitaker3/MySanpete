@page "/add-bundle"

@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IBundleService bundleService
@inject IVoucherService voucherService

<div class="form-container">
    <h3>Admin Add Bundle</h3>
    <form class="mt-5">
        <div class="form-group mt-5">
            <label for="name">Name</label>
            <input id="name" class="form-control" @bind="Name" required/>
        </div>
        <div class="form-group mt-5">
            <label for="startDate">Start Date</label>
            <input id="startDate" type="datetime-local" class="form-control" @bind="StartDate" required />
        </div>
        <div class="form-group mt-5">
            <label for="endDate">End Date</label>
            <input id="endDate" type="datetime-local" class="form-control" @bind="EndDate" required />
        </div>
        @if (errorMessage == "")
        {
            <button type="submit" class="btn btn-primary" @onsubmit="CreateNewBundle">Submit</button>
        }
        else
        {
            <div class="alert alert-danger">
                <p>Please fix the error to submit the form</p>
                <p>@errorMessage</p>
                <button type="submit" class="btn btn-primary" @onclick="CreateNewBundle">Submit</button>
            </div>
        }
    </form>

</div>

@code {
    public string Name { get; set; } = "";
    public DateTime StartDate { get; set; } = DateTime.Today.ToUniversalTime();
    public DateTime EndDate { get; set; } = DateTime.Today.ToUniversalTime();

    public IEnumerable<VoucherDTO>? allVouchers { get; set; }

    public string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        allVouchers = await voucherService.GetAllVouchers();
    }

    public async Task CreateNewBundle()
    {
        try
        {

        }
        catch
        {
            
        }
    }
}

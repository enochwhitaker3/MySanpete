@page "/account"
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IUserService userService
@inject IUserState userState

@inject NavigationManager NavMan

@attribute [Authorize]


@if (User is not null)
{
    <div class="row" style="max-width: 1200px; margin-left: auto; margin-right: auto;">
        <h3>My Account</h3>

            <h3>My Account</h3>

            <img class="img-fluid border-rounded" style="width: 120px; height: 120px;" src="@User.PhotoURL" />

            <div class="form-group">
                <label for="photo">Add a Thumnail Image</label>
                <InputFile OnChange="SaveFile"></InputFile>
                <button class="btn btn-primary" @onclick="UpdateUserPhoto">Update Photo</button>
            </div>

            <div class="mb-3">
                <label for="exampleFormControlInput1" class="form-label">Edit your Username</label>
                <small><br />This will be public to other users and will be seen on comments.</small>
                <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="username">
            </div>

            <h3>My Vouchers</h3>
            <button @onclick="GoToUserVouchers" class="btn btn-primary">View Vouchers</button>



            <h3>My Saved Events</h3>
            <button @onclick="GoToUserEvents" class="btn btn-primary">My Saved Events</button>

    </div>
}

@code {

    byte[]? ImageBytes { get; set; }

    public UserDTO User { get; set; }

    public string? AuthId { get; set; }

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateTask;
        try
        {
            AuthId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;
            if (AuthId is null)
            {
                NavMan.NavigateTo("/404");
            }
        }
        catch
        {
            NavMan.NavigateTo("/404");
        }

        User = await userService.GetAuthUser(AuthId!);

    }

    public async Task SaveFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.GetMultipleFiles(1).Single();

        using (var ms = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(ms);
            ImageBytes = ms.ToArray();
        }


    }

    public async Task UpdateUserPhoto()
    {
        UpdateUserRequest updatedUsr = new UpdateUserRequest()
            {
                Guid = User.Guid,
                Id = User.Id,
                Photo = ImageBytes,
                UserEmail = User.UserEmail,
                Username = User.Username
            };

        var result = await userService.PatchUser(updatedUsr);
    }

    public void GoToUserVouchers()
    {
        NavMan.NavigateTo("/user-vouchers");
    }

    public void GoToUserEvents()
    {
        NavMan.NavigateTo("/user-events");
    }
}

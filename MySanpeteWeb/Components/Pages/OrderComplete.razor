@page "/OrderComplete"

@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services
@using Stripe

@inject IUserVoucherService userVoucherService
@inject IUserService userService
@inject IVoucherService voucherService
@inject IBundleService bundleService
@inject NavigationManager navManager

@rendermode InteractiveServer

@if (errorMessage == "")
{
    <div class="container">
        <div class="content d-grid justify-content-center align-items-center">
            <img class="img_success" src="Images/order_success.svg" />
            <h2>Order Complete</h2>
            <p>Got it, thanks!</p>
            @if (BusinessDefined is true)
            {
                @if (IsBundle)
                {
                    <p>Your bundle has been purchased! Have fun with your events</p>
                    <button type="submit" class="btn btn-primary" @onclick="@(() => navManager.NavigateTo("/user-bundles"))">Bundles</button>
                }
                else
                {
                    <p>Go to your purchased voucher page to redeem them around Sanpete County!</p>
                    <button type="submit" class="btn btn-primary" @onclick="@(() => navManager.NavigateTo("/user-vouchers"))">Vouchers</button>
                }
            }
            else
            {
                <p style="font-size: 1vw;">Loading...</p>
            }
        </div>
    </div>
}
else
{
    <div class="alert-warning">
        <p>@errorMessage</p>
    </div>
}

@code {
    public string? intentId { get; set; }
    public string? authId { get; set; }
    public string BusinessName { get; set; } = "";
    public string? errorMessage { get; set; } = "";

    public int userId { get; set; }
    public int bundleId { get; set; }
    public int voucherId { get; set; }

    public decimal finalPrice { get; set; }

    public static bool BusinessDefined = false;

    public VoucherDTO voucher { get; set; } = new();
    public BundleDTO bundle { get; set; } = new();

    [SupplyParameterFromQuery]
    public bool IsBundle { get; set; }

    [CascadingParameter]
    Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BusinessDefined = false;
        var options = new Stripe.Checkout.SessionListOptions { Limit = 100 };
        var service = new Stripe.Checkout.SessionService();
        StripeList<Stripe.Checkout.Session> sessions = service.List(options);

        var authState = await authenticationState!;
        authId = authState?.User?.Claims?.FirstOrDefault(x => x.Type == "authId")?.Value;

        var id = sessions.FirstOrDefault(x => x.Metadata.ContainsKey("UserId") && x.Metadata["UserId"] == authId && x.Created > DateTime.Now.AddMinutes(-30));

        try
        {
            voucherId = int.Parse(id!.Metadata["VoucherId"]);
            voucher = (await voucherService.GetVoucher(voucherId)) ?? throw new Exception("BWAH");
        }
        catch
        {
            try
            {
                bundleId = int.Parse(id!.Metadata["BundleId"]);
            }
            catch
            {
                navManager.NavigateTo("/404", true);
            }
        }

        BusinessName = voucher.BusinessName ?? "";
        BusinessDefined = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var options = new Stripe.Checkout.SessionListOptions { Limit = 100 };
        var service = new Stripe.Checkout.SessionService();
        StripeList<Stripe.Checkout.Session> sessions = service.List(options);

        var authState = await authenticationState!;
        authId = authState?.User?.Claims?.FirstOrDefault(x => x.Type == "authId")?.Value;

        var id = sessions.FirstOrDefault(x => x.Metadata.ContainsKey("UserId") && x.Metadata["UserId"] == authId && x.Created > DateTime.Now.AddMinutes(-30));


        try
        {
            if (id is not null)
            {
                if (IsBundle)
                {
                    await PurchaseBundle(id, firstRender);
                }
                else
                {
                    await PurchaseVoucher(id, firstRender);
                }
            }
            else
            {
                throw new Exception("Checkout Session could not be found");
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async Task CreateNewUserVoucher()
    {
        try
        {
            var request = new AddUserVoucherRequest()
                {
                    chargeId = intentId,
                    userId = userId,
                    voucherId = voucherId,
                    finalPrice = finalPrice
                };

            await userVoucherService.AddUserVoucher(request);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async Task PurchaseVoucher(Stripe.Checkout.Session id, bool firstRender)
    {
        voucherId = int.Parse(id.Metadata["VoucherId"]);
        authId = id.Metadata["UserId"];
        voucher = (await voucherService.GetVoucher(voucherId)) ?? throw new Exception("BWAH");
        BusinessName = voucher.BusinessName ?? "";

        var user = (await userService.GetAuthUser(authId));
        if (user is not null)
        {
            userId = user.Id;
        }
        else
        {
            throw new Exception("Somehow you aren't logged in thats crazy");
        }

        finalPrice = Convert.ToDecimal(id.AmountTotal) / 100.00M;

        if (id.PaymentIntentId is null)
        {
            intentId = "Free Voucher Claimed";
        }
        else
        {
            intentId = id.PaymentIntentId;
        }

        if (firstRender)
        {
            //Make sure that this charge hasn't been added to the database yet.
            var allVouchers = await userVoucherService.GetAllByUser(userId);
            if (!allVouchers.Any(x => x.Charge_Id == intentId && x.Charge_Id != "Free Voucher Claimed"))
            {
                await CreateNewUserVoucher();
            }
            else
            {
                navManager.NavigateTo("/", true);
            }
        }
    }

    public async Task PurchaseBundle(Stripe.Checkout.Session id, bool firstRender)
    {
        bundleId = int.Parse(id.Metadata["BundleId"]);
        authId = id.Metadata["UserId"];
        var bundle = (await bundleService.GetBundle(bundleId)) ?? throw new Exception("BWAH");
        BusinessName = voucher.BusinessName ?? "";

        var user = (await userService.GetAuthUser(authId));
        if (user is not null)
        {
            userId = user.Id;
        }
        else
        {
            throw new Exception("Somehow you aren't logged in thats crazy");
        }

        finalPrice = Convert.ToDecimal(id.AmountTotal) / 100.00M;

        if (id.PaymentIntentId is null)
        {
            intentId = "Free Voucher Claimed";
        }
        else
        {
            intentId = id.PaymentIntentId;
        }

        if (firstRender)
        {
            //Make sure that this charge hasn't been added to the database yet.
            var allVouchers = await userVoucherService.GetAllByUser(userId);
            if (!allVouchers.Any(x => x.Charge_Id == intentId && x.Charge_Id != "Free Voucher Claimed"))
            {
                foreach (var voucher in bundle!.Vouchers!)
                {
                    voucherId = voucher.Id;
                    finalPrice = voucher.RetailPrice ?? 0M;
                    await CreateNewUserVoucher();
                }
            }
            else
            {
                navManager.NavigateTo("/", true);
            }
        }
    }
}
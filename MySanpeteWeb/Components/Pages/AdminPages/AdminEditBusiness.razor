@page "/edit-business/{Success}"
@page "/edit-business"

@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IBusinessService businessService
@inject NavigationManager navManager;

@attribute [Authorize(Roles = "Admin")]

@if (IsLoading)
{
    <RazorClassLibrary.Pages.LoadingComponent></RazorClassLibrary.Pages.LoadingComponent>
}
else
{
    @if (AllBusinesses is not null)
    {
        <div class="form-container" onsubmit="return false" style="margin-bottom: 20px;">

            <h3>Admin Edit Business</h3>
            <form class="mt-5 ">
                <div class="form-group mt-5">
                    <button type="button" class="btn btn-info" data-toggle="modal" data-target="#voucherPopup">Select Business</button>
                </div>

                <div class="modal fade" id="voucherPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalLabel">Add Voucher</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th scope="col">Business Name</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var b in AllBusinesses!)
                                        {
                                            <tr @onclick="() => AddBusiness(b.Id)" data-dismiss="modal">
                                                <td>@b.BusinessName</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
                <hr />
                @if (SelectedBusiness is not null)
                {
                    <div class="form-group mt-5">
                        <label for="Name">Business Name</label>
                        <input id="title" class="form-control" @bind="@SelectedBusiness.BusinessName" required />
                    </div>
                    <div class="form-group mt-5">
                        <label for="Address">Address</label>
                        <input id="title" class="form-control" @bind="@SelectedBusiness.Address" required />
                    </div>
                    <div class="form-group mt-5">
                        <label for="Phone Number">Phone Number (Format like ***-***-****)</label>
                        <input id="phone" class="form-control" type="tel" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}" @bind="@SelectedBusiness.PhoneNumber" />
                    </div>
                    <div class="form-group mt-5">
                        <label for="Website URL">Website URL</label>
                        <input id="website" class="form-control" @bind="@SelectedBusiness.WebsiteURL" />
                    </div>
                    <div class="form-group mt-5">
                        <label for="Email">Email</label>
                        <input id="email" class="form-control" type="email" @bind="@SelectedBusiness.Email" required />
                    </div>
                    <div class="form-group mt-5">
                        <label for="Description">Description</label>
                        <input id="title" class="form-control" @bind="@SelectedBusiness.Description" />
                    </div>
                    <div class="form-group">
                        <label for="photo">Business Logo</label>
                        <InputFile OnChange="SaveFile"></InputFile>
                    </div>



                    @if (ErrorMessage == "")
                    {
                        <div class="form-group mt-5">
                            <button type="submit" style="height: 50px;" class="btn btn-primary" @onclick="() => UpdateBusiness(SelectedBusiness)">Update</button>
                            <button type="button" style="height: 50px;" class="btn btn-danger" data-toggle="modal" data-target="#deleteConfirm">Delete</button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <p>Please fix the error to submit the form</p>
                            <p>@ErrorMessage</p>
                            <div class="form-group mt-5">
                                <button type="submit" style="height: 50px;" class="btn btn-primary" @onclick="() => UpdateBusiness(SelectedBusiness)">Update</button>
                                <button type="button" style="height: 50px;" class="btn btn-danger" data-toggle="modal" data-target="#deleteConfirm">Delete</button>
                            </div>
                        </div>
                    }

                    <div class="modal fade" id="deleteConfirm" tabindex="-1" role="dialog" aria-labelledby="deleteConfirm" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="exampleModalLabel">Deletion Confirmation</h5>
                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    Are you sure you want to delete @SelectedBusiness.BusinessName? You won't be able to get it back!
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                    <button type="submit" class="btn btn-danger" @onclick="() => DeleteBusiness(SelectedBusiness)">Delete</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <p>Select a business to be able to edit it</p>
                }
            </form>
            @if (Success == "true")
            {
                <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
                    <p>You successfully updated the business!</p>
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            }
        </div>

    }
    else
    {
        <div>
            <p>No businesses to edit, add more businesses to edit them here</p>
        </div>
    }
}

@code {
    [Parameter]
    public string? Success { get; set; }
    public string? ErrorMessage = "";

    public byte[]? ImageBytes { get; set; }

    public bool IsLoading { get; set; } = true;

    public List<BusinessDTO>? AllBusinesses { get; set; }
    public BusinessDTO? SelectedBusiness { get; set; }
    public UpdateBusinessRequest UpdateBusinessRequest = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        AllBusinesses = await businessService.GetAllBusinesses();
        IsLoading = false;
    }

    public async void AddBusiness(int selectedBusinessID)
    {
        try
        {
            SelectedBusiness = await businessService.GetBusiness(selectedBusinessID);
            if (SelectedBusiness is null)
            {
                throw new Exception("business not found");
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public async Task SaveFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.GetMultipleFiles(1).Single();

        using (var ms = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(ms);
            ImageBytes = ms.ToArray();
        }
    }

    public async Task UpdateBusiness(BusinessDTO business)
    {
        if (business is null)
        {
            throw new Exception("Business was not found");
        }
        if (ImageBytes is null)
        {
            UpdateBusinessRequest = new UpdateBusinessRequest()
                {
                    Id = business.Id,
                    BusinessName = business.BusinessName,
                    Address = business.Address,
                    PhoneNumber = business.PhoneNumber,
                    WebsiteURL = business.WebsiteURL,
                    Email = business.Email,
                    Description = business.Description,
                };
        }
        else
        {
            UpdateBusinessRequest = new UpdateBusinessRequest()
                {
                    Id = business.Id,
                    BusinessName = business.BusinessName,
                    Address = business.Address,
                    PhoneNumber = business.PhoneNumber,
                    WebsiteURL = business.WebsiteURL,
                    Email = business.Email,
                    Description = business.Description,
                    Logo = ImageBytes
                };
        }


        try
        {
            if (UpdateBusinessRequest is null)
            {
                throw new Exception("The business was null");
            }
            if (UpdateBusinessRequest.BusinessName is null || UpdateBusinessRequest.BusinessName.Trim() == "")
            {
                throw new Exception("The bundle needs to have a name");
            }
            if (UpdateBusinessRequest.Address is null || UpdateBusinessRequest.Address.Trim() == "")
            {
                throw new Exception("The bundle needs to have an Address");
            }
            if (UpdateBusinessRequest.Email is null || UpdateBusinessRequest.Email.Trim() == "")
            {
                throw new Exception("The bundle needs to have an Email");
            }
            if (UpdateBusinessRequest.PhoneNumber is null || UpdateBusinessRequest.PhoneNumber.Trim() == "")
            {
                throw new Exception("The bundle needs to have an Phone Number");
            }

            var newBusiness = await businessService.UpdateBusiness(UpdateBusinessRequest);

            if (newBusiness is null)
            {
                throw new Exception("The new business was null");
            }
            ErrorMessage = "";
            Success = "true";
            ReloadPage();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public async void DeleteBusiness(BusinessDTO business)
    {
        try
        {
            if (business is null)
            {
                throw new Exception("Selected business was not found");
            }

            var result = await businessService.DeleteBusiness(business.Id);

            if (result == false)
            {
                throw new Exception("Business was unable to be deleted");
            }

            ErrorMessage = "";
            Success = "true";
            ReloadPage();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/edit-business/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }

}

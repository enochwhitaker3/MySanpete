@page "/edit-voucher/{Success}"
@page "/edit-voucher"

@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@using Stripe

@inject NavigationManager navManager
@inject IVoucherService VoucherService
@inject IBusinessService BusinessService
@inject IStripeService StripeService

@attribute [Authorize(Roles = "Admin")]

<h3>Admin Edit Voucher</h3>

<div class="form-container mb-5">
    <form class="mt-5" onsubmit="return false">
        <div class="form-group mt-5">
            <label for="author">Choose a voucher to edit</label>
            <select id="author" class="form-control" @bind="SelectedVoucherId" required>
                @if (AllVouchers is not null)
                {
                    <option value="">Select a voucher to edit...</option>
                    @foreach (var v in AllVouchers)
                    {
                        <option value="@v.Id" @onclick="() => UpdateWhichVoucherIsSelected(v.Id)">@v.PromoName</option>
                    }
                }
            </select>
        </div>
        @if (SelectedVoucher is not null)
        {


            <hr />
            <div class="form-group mt-5">
                <label for="author">Choose Business Associated with this Voucher</label>
                <select id="author" class="form-control" @bind="BusinessId" required>
                    @if (AllBusinesses is not null)
                    {
                        <option value="@SelectedVoucher!.BusinessName"> @SelectedVoucher.BusinessName</option>
                        @foreach (var v in AllBusinesses)
                        {
                            <option value="@v.Id">@v.BusinessName</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group mt-5">
                <label for="startDate">Start Date</label>
                <input id="startDate" type="datetime-local" class="form-control" @bind="StartDate" required />
            </div>
            <div class="form-group mt-5">
                <label for="endDate">End Date</label>
                <input id="endDate" type="datetime-local" class="form-control" @bind="EndDate" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Code</label>
                <input id="title" class="form-control" @bind="PromoCode" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Name</label>
                <input id="title" class="form-control" @bind="PromoName" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Description</label>
                <input id="title" class="form-control" @bind="PromoDescription" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Stock (Enter 0 for no limit)</label>
                <input id="title" class="form-control" @bind="PromoStock" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Retail Price (Enter $0.00 for coupons)</label>
                <input id="title" class="form-control" @bind="RetailPrice" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Total Reclaimable (Enter 0 for no limit)</label>
                <input id="title" class="form-control" @bind="TotalReclaimable" required />
            </div>
            <div class="form-group mt-5">
                <label for="isActive">Is Active? <br /><small>Edit this if you don't this to show up as purchasable.</small></label><br />
                <input type="radio" id="radioTrue" name="myRadio" @onchange="@(e => IsActive = true)" checked="@(IsActive == true)" />
                <label for="radioTrue">Active</label>
                <br />
                <input type="radio" id="radioFalse" name="myRadio" @onchange="@(e => IsActive = false)" checked="@(IsActive == false)" />
                <label for="radioFalse">Not Active</label>
            </div>
            <div class="form-group mt-5">
                <label for="isBundle">Is part of Bundle? <br /><small>If this voucher is part of a bundle, you cannot purchase it individually.</small></label><br />
                <input type="radio" id="radioTrue" name="myRadio1" @onchange="@(e => IsBundle = true)" checked="@(IsBundle == true)" />
                <label for="radioTrue">Yes</label><br />
                <input type="radio" id="radioFalse" name="myRadio1" @onchange="@(e => IsBundle = false)" checked="@(IsBundle == false)" />
                <label for="radioFalse">No</label>
            </div>
            @if (errorMessage == "")
            {
                <button type="submit" class="btn btn-primary" @onclick="UpdateVoucher">Submit</button>
            }
            else
            {
                <div class="alert alert-danger">
                    <p>Please fix the error to submit the form</p>
                    <p>@errorMessage</p>
                    <button type="submit" class="btn btn-primary" @onclick="UpdateVoucher">Submit</button>
                </div>
            }
        }
    </form>

    @if (Success == "true")
    {
        <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
            <p>You successfully updated the last bundle!</p>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
</div>



@code {
    [Parameter]
    public string? Success { get; set; }

    public List<VoucherDTO> AllVouchers { get; set; } = new();
    public List<BusinessDTO>? AllBusinesses { get; set; }

    public VoucherDTO? SelectedVoucher { get; set; }

    public int SelectedVoucherId { get; set; }

    public string errorMessage = "";


    public int BusinessId { get; set; }
    public DateTime? EndDate { get; set; } = DateTime.Today.ToUniversalTime();
    public DateTime StartDate { get; set; } = DateTime.Today.ToUniversalTime();
    public string? PromoCode { get; set; } = "Default Promo";
    public string? PromoDescription { get; set; } = "Default Description";
    public string? PromoName { get; set; } = "Default Promo Name";
    public int? PromoStock { get; set; }
    public Decimal? RetailPrice { get; set; }
    public int? TotalReclaimable { get; set; }
    public bool IsActive { get; set; }
    public bool IsBundle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AllVouchers = await VoucherService.GetAllVouchers();
        AllBusinesses = await BusinessService.GetAllBusinesses();
    }

    public void UpdateWhichVoucherIsSelected(int id)
    {
        SelectedVoucher = AllVouchers.Where(x => x.Id == id).FirstOrDefault()!;

        StartDate = SelectedVoucher!.StartDate;
        EndDate = SelectedVoucher.EndDate;
        PromoCode = SelectedVoucher.PromoCode;
        PromoDescription = SelectedVoucher.PromoDescription;
        PromoName = SelectedVoucher.PromoName;
        PromoStock = SelectedVoucher.Stock;
        RetailPrice = SelectedVoucher.RetailPrice;
        TotalReclaimable = SelectedVoucher.AmmountReclaimable;
        IsActive = IsActive;
        IsBundle = IsBundle;
    }

    public async Task UpdateVoucher()
    {

        VoucherDTO voucher = new VoucherDTO()
            {
                Id = SelectedVoucherId,
                StartDate = StartDate,
                EndDate = EndDate,
                PromoCode = PromoCode,
                PromoName = PromoName,
                PromoDescription = PromoDescription,
                RetailPrice = RetailPrice,
                AmmountReclaimable = TotalReclaimable,
                Stock = PromoStock,
                IsActive = IsActive,
                IsBundle = IsBundle,
                StripeId = SelectedVoucher!.StripeId,
                PriceId = SelectedVoucher.PriceId
            };


        try
        {
            string newPriceId = StripeService.UpdateStripeProduct(voucher);
            voucher.PriceId = newPriceId;
        }
        catch (Exception ex)
        {
            errorMessage = $"Something went wrong when updating this product in Stripe. Developer exception: {ex}";
        }


        try
        {
            await VoucherService.UpdateVoucher(voucher);
            Success = "true";
            ReloadPage();
        }
        catch (Exception ex)
        {
            errorMessage = "Something went wrong: " + ex.Message;
        }
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/add-voucher/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }

}

@page "/add-podcast/{Success}"
@page "/add-podcast"

@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IPodcastService podcastService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<div class="form-container" style="margin-bottom: 20px;">
    <h3>Admin Add Podcast</h3>
    <div class="form-group mt-5">
        <label for="PodcastName">Podcast Name</label>
        <input id="PodcastName" class="form-control" @bind="PodcastName" />
    </div>

    <div class="form-group mt-5">
        <label for="PodcastUrl">Podcast Embed Share Code</label>
        <input id="PodcastUrl" class="form-control" @bind="URL" />
    </div>

    <div class="form-group mt-5">
        <label for="PublishDate">Publish Date</label>
        <input id="PublishDate" type="datetime-local" class="form-control" @bind="PublishDate" required />
    </div>

    <div class="form-group mt-5">
        <label for="AllowComments">Allow Comments?</label><br />

        <label for="radioTrue">Yes</label>
        <input type="radio" id="radioTrue" name="myRadio" @onchange="@(e => Commentable = true)" checked="@(Commentable == true)" />

        <label for="radioFalse">No</label>
        <input type="radio" id="radioFalse" name="myRadio" @onchange="@(e => Commentable = false)" checked="@(Commentable == false)" />
    </div>

    @if (errorMessage == "")
    {
        <button type="submit" class="btn btn-primary" @onclick="CreateNewPodcast">Submit</button>
    }
    else
    {
        <div class="alert alert-danger">
            <p>Please fix the error to submit the form</p>
            <p>@errorMessage</p>
            <button type="submit" class="btn btn-primary" @onclick="CreateNewPodcast">Submit</button>
        </div>
    }

    @if (Success == "true")
    {
        <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
            <p>You successfully added the new podcast!</p>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

</div>

@code {
    public AddPodcastRequest? newPodcast = new();

    public string errorMessage = "";
    [Parameter]
    public string? Success { get; set; }

    public string URL { get; set; } = "Default URL";
    public bool Commentable { get; set; }
    public string PodcastName { get; set; } = "Default Name";
    public DateTime PublishDate { get; set; } = DateTime.Today.ToUniversalTime();

    protected override void OnInitialized()
    {

    }

    public async Task CreateNewPodcast()
    {
        try
        {
            if (PodcastName is null || PodcastName == "Default Name" || PodcastName.Trim() == "")
            {
                throw new Exception("The podcast needs a name");
            }

            if (URL is null || URL == "Default URL" || URL.Trim() == "")
            {
                throw new Exception("The podcast needs a URL to the podbean link");
            }

            newPodcast = new AddPodcastRequest()
                {
                    Commentable = Commentable,
                    PodcastName = PodcastName,
                    URL = URL,
                    PublishDate = PublishDate
                };

            if (newPodcast is not null)
            {
                await podcastService.AddPodcast(newPodcast);

                Success = "true";
                ReloadPage();
            }
            else
            {
                throw new Exception("Whoops something didn't work right");
            }
        }
        catch (Exception ex)
        {
            // Handle errors appropriately
            errorMessage = ex.Message;
        }
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/add-podcast/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }
}
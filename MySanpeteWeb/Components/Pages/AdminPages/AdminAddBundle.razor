@page "/add-bundle/{Success}"
@page "/add-bundle"

@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IBundleService bundleService
@inject IVoucherService voucherService
@inject IStripeService stripeService
@inject NavigationManager navManager;
@attribute [Authorize(Roles = "Admin")]

@if (IsLoading)
{
    <RazorClassLibrary.Pages.LoadingComponent></RazorClassLibrary.Pages.LoadingComponent>
}
else
{
    <div class="form-container" onsubmit="return false" style="margin-bottom: 20px;">
        <h3>Admin Add Bundle</h3>
        <form class="mt-5">
            <div class="form-group mt-5">
                <label for="name">Name</label>
                <input id="name" class="form-control" @bind="Name" required />
            </div>
            <div class="form-group mt-5">
                <label for="startDate">Start Date</label>
                <input id="startDate" type="datetime-local" class="form-control" @bind="StartDate" required />
            </div>
            <div class="form-group mt-5">
                <label for="endDate">End Date</label>
                <input id="endDate" type="datetime-local" class="form-control" @bind="EndDate" required />
            </div>
            @if (AllVouchers?.Count() > 0)
            {
                <hr />
                @foreach (var v in SelectedVouchers)
                {
                    <div class="d-flex flex-row justify-content-between">
                        <p>@v.PromoName</p>
                        <button class="btn btn-danger" @onclick="() => RemoveVoucher(v)">Remove</button>
                    </div>
                    <hr />
                }
            }
            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#voucherPopup">+ Add Voucher</button>

            <div class="modal fade" id="voucherPopup" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Add Voucher</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th scope="col">Voucher Name</th>
                                        <th scope="col">Business Name</th>
                                        <th scope="col">Start Date</th>
                                        <th scope="col">End Date</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var voucher in AllVouchers!)
                                    {
                                        <tr @onclick="() => AddVoucher(voucher.Id)" data-dismiss="modal">
                                            <td>@voucher.PromoName</td>
                                            <td>@voucher.BusinessName</td>
                                            <td>@voucher.StartDate</td>
                                            <td>@voucher.EndDate</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>

            @if (ErrorMessage == "")
            {
                <button type="submit" class="btn btn-primary" @onclick="CreateNewBundle">Submit</button>
            }
            else
            {
                <div class="alert alert-danger">
                    <p>Please fix the error to submit the form</p>
                    <p>@ErrorMessage</p>
                    <button type="submit" class="btn btn-primary" @onclick="CreateNewBundle">Submit</button>
                </div>
            }

        </form>

        @if (Success == "true")
        {
            <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
                <p>You successfully added the last bundle!</p>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }

    </div>
}

@code {
    [Parameter]
    public string? Success { get; set; }
    public string Name { get; set; } = "Default Name";
    public string ErrorMessage = "";

    public DateTime StartDate { get; set; } = DateTime.Today.ToUniversalTime();
    public DateTime EndDate { get; set; } = DateTime.Today.ToUniversalTime();

    public bool IsLoading { get; set; } = true;

    public List<VoucherDTO> SelectedVouchers { get; set; } = new();
    public List<VoucherDTO>? AllVouchers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        AllVouchers = await voucherService.GetAllVouchers();
        AllVouchers = AllVouchers.Where(x => x.EndDate > DateTime.Today.ToUniversalTime() || x.EndDate is null).ToList();
        IsLoading = false;
    }

    public async Task CreateNewBundle()
    {
        try
        {
            if (Name is null || Name == "Default Name" || Name.Trim() == "")
            {
                throw new Exception("You need to give a name for the bundle or change it from the default one");
            }

            if (EndDate < StartDate)
            {
                throw new Exception("The end date for the bundle needs to be more in the future than the start date");
            }

            if (SelectedVouchers.Count <= 1)
            {
                throw new Exception("You need to select 2 or more voucher for a bundle");
            }

            AddBundleRequest newBundle = new AddBundleRequest()
                {
                    EndDate = EndDate.ToUniversalTime(),
                    StartDate = StartDate.ToUniversalTime(),
                    Name = Name,
                    Vouchers = SelectedVouchers
                };

            string[] returnedStipeId = stripeService.AddBundleToStripe(newBundle);

            newBundle = new AddBundleRequest()
                {
                    EndDate = EndDate.ToUniversalTime(),
                    StartDate = StartDate.ToUniversalTime(),
                    Name = Name,
                    Vouchers = SelectedVouchers,
                    StripeId = returnedStipeId[0],
                    PriceId = returnedStipeId[1]
                };

            try
            {
                if (newBundle is not null)
                {
                    await bundleService.AddNewBundle(newBundle);
                    ErrorMessage = "";
                    Success = "true";
                    ReloadPage();
                }
                else
                {
                    throw new Exception("Whoops the bundle was null and couldn't be added");
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public void AddVoucher(int selectedVoucherId)
    {
        VoucherDTO? selectedVoucher = AllVouchers!.Where(x => x.Id == selectedVoucherId).FirstOrDefault();
        if (selectedVoucher is not null)
        {
            SelectedVouchers.Add(selectedVoucher);
        }
    }

    public void RemoveVoucher(VoucherDTO voucher)
    {
        SelectedVouchers.Remove(voucher);
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/add-bundle/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }
}

@page "/add-voucher/{Success}"
@page "/add-voucher"

@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services
@using Stripe

@inject IVoucherService voucherService
@inject IBusinessService businessService
@inject IStripeService stripeService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

@if (IsLoading)
{
    <RazorClassLibrary.Pages.LoadingComponent></RazorClassLibrary.Pages.LoadingComponent>
}
else
{
    <div class="form-container" style="margin-bottom: 20px;">
        <h3>Admin Add Voucher</h3>
        <form class="mt-5" onsubmit="return false">
            <div class="form-group mt-5">
                <label for="title">Business Name</label>
                <select id="title" class="form-control" @bind="BusinessName" required>
                    @if (AllBusinesses is not null)
                    {
                        <option value="">Choose a business</option>
                        @foreach (var business in AllBusinesses)
                        {
                            <option value="@business.BusinessName">@business.BusinessName</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group mt-5">
                <label for="startDate">Start Date</label>
                <input id="startDate" type="datetime-local" class="form-control" @bind="StartDate" required />
            </div>
            <div class="form-group mt-5">
                <label for="endDate">End Date</label>
                <input id="endDate" type="datetime-local" class="form-control" @bind="EndDate" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Code</label>
                <input id="title" class="form-control" @bind="PromoCode" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Name</label>
                <input id="title" class="form-control" @bind="PromoName" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Description</label>
                <input id="title" class="form-control" @bind="PromoDescription" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Promo Stock (Enter 0 for no limit)</label>
                <input id="title" class="form-control" @bind="PromoStock" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Retail Price (Enter $0.00 if you want it to be a coupon)</label>
                <input id="title" class="form-control" @bind="RetailPrice" required />
            </div>
            <div class="form-group mt-5">
                <label for="title">Total Reclaimable (Enter 0 for no limit)</label>
                <span>$</span><input id="title" class="form-control" @bind="TotalReclaimable" required />
            </div>
            <div class="form-group mt-5">
                <label for="isActive">Is Active? <br /><small>Edit this if you don't this to show up as purchasable.</small></label><br />
                <input type="radio" id="radioTrue" name="myRadio" @onchange="@(e => IsActive = true)" checked="@(IsActive == true)" />
                <label for="radioTrue">Active</label>
                <br />
                <input type="radio" id="radioFalse" name="myRadio" @onchange="@(e => IsActive = false)" checked="@(IsActive == false)" />
                <label for="radioFalse">Not Active</label>
            </div>
            <div class="form-group mt-5">
                <label for="isBundle">Is part of Bundle? <br /><small>If this voucher is part of a bundle, you cannot purchase it individually.</small></label><br />
                <input type="radio" id="radioTrue" name="myRadio1" @onchange="@(e => IsBundle = true)" checked="@(IsBundle == true)" />
                <label for="radioTrue">Yes</label><br />
                <input type="radio" id="radioFalse" name="myRadio1" @onchange="@(e => IsBundle = false)" checked="@(IsBundle == false)" />
                <label for="radioFalse">No</label>
            </div>
            @if (ErrorMessage == "")
            {
                <button type="submit" class="btn btn-primary" @onclick="CreateNewVoucher">Submit</button>
            }
            else
            {
                <div class="alert alert-danger">
                    <p>Please fix the error to submit the form</p>
                    <p>@ErrorMessage</p>
                    <button type="submit" class="btn btn-primary" @onclick="CreateNewVoucher">Submit</button>
                </div>
            }
        </form>

        @if (Success == "true")
        {
            <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
                <p>You successfully added the last voucher!</p>
                <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string? Success { get; set; }
    public string? PromoCode { get; set; } = "Default Promo";
    public string? PromoDescription { get; set; } = "Default Description";
    public string? PromoName { get; set; } = "Default Promo Name";
    public string ErrorMessage = "";
    public string BusinessName { get; set; } = "";

    public int TotalReclaimable { get; set; }
    public int PromoStock { get; set; }

    public Decimal RetailPrice { get; set; }

    public bool IsActive { get; set; } = true;
    public bool IsBundle { get; set; } = false;
    public bool IsLoading { get; set; } = true;

    public DateTime StartDate { get; set; } = DateTime.Today.ToUniversalTime();
    public DateTime EndDate { get; set; } = DateTime.Today.ToUniversalTime();

    public AddVoucherRequest? NewVoucher;
    public BusinessDTO SelectedBusiness { get; set; } = new();
    public IEnumerable<BusinessDTO>? AllBusinesses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        NewVoucher = new();
        AllBusinesses = await businessService.GetAllBusinesses();
        IsLoading = false;
    }

    public async Task CreateNewVoucher()
    {
        try
        {
            if (PromoCode is null || PromoCode.Trim() == "")
            {
                throw new Exception("You need to give the voucher a promo code");
            }

            if (PromoDescription is null || PromoDescription.Trim() == "" || PromoDescription == "Default Description")
            {
                throw new Exception("You need to give the voucher a promo description");
            }

            if (PromoName is null || PromoName.Trim() == "" || PromoName == "Default Promo Name")
            {
                throw new Exception("You need to give the voucher a promo name");
            }

            if (PromoCode == "Default Promo" || PromoCode.Trim() == "")
            {
                throw new Exception("You need to change the promo code from the default");
            }

            if (PromoStock < 0)
            {
                throw new Exception("You need to give promo stock a value above or equal to 0");
            }

            if (RetailPrice < 0)
            {
                throw new Exception("You need to give retail price a value above or equal to 0");
            }

            if (TotalReclaimable < 0)
            {
                throw new Exception("You need to give total reclaimable to a value above or equal to 0");
            }

            if (EndDate <= StartDate)
            {
                throw new Exception("You need to make the end date further in the future than the start date");
            }

            SelectedBusiness = AllBusinesses!.Where(x => x.BusinessName == BusinessName).FirstOrDefault()!;

            if (SelectedBusiness is null)
            {
                throw new Exception("You need to select a business for this voucher");
            }

            AddVoucherRequest request = new()
                {
                    BusinessId = SelectedBusiness.Id,
                    EndDate = EndDate,
                    StartDate = StartDate,
                    PromoCode = PromoCode,
                    PromoDescription = PromoDescription,
                    PromoName = PromoName,
                    PromoStock = PromoStock,
                    RetailPrice = RetailPrice,
                    TotalReclaimable = TotalReclaimable,
                    IsActive = IsActive,
                    IsBundle = IsBundle
                };

            string[] returnedStripeId = stripeService.AddProductToStripe(request);

            NewVoucher = new AddVoucherRequest()
                {
                    BusinessId = SelectedBusiness.Id,
                    StartDate = StartDate.ToUniversalTime(),
                    EndDate = EndDate.ToUniversalTime(),
                    PromoCode = PromoCode,
                    PromoDescription = PromoDescription,
                    PromoName = PromoName,
                    PromoStock = PromoStock,
                    RetailPrice = RetailPrice,
                    TotalReclaimable = TotalReclaimable,
                    StripeId = returnedStripeId[0],
                    PriceId = returnedStripeId[1],
                    IsActive = IsActive,
                    IsBundle = IsBundle
                };

            try
            {
                if (NewVoucher is not null)
                {

                    await voucherService.AddVoucher(NewVoucher);

                    // Clear the form
                    NewVoucher = new AddVoucherRequest();
                    ErrorMessage = "";

                    Success = "true";
                    ReloadPage();
                }
                else
                {
                    throw new Exception("Whoops the voucher was null and couldn't be added");
                }
            }
            catch (Exception ex)
            {
                // Handle errors appropriately
                ErrorMessage = ex.Message;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/add-voucher/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }
}
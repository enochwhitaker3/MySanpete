@page "/purchase-bundle/{bundleId:int}"

@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services
@using Stripe.Checkout

@inject NavigationManager navManager
@inject IBundleService bundleService
@inject IStripeService stripeService
@inject IUserService userService

@attribute [Authorize]

<div style="padding-bottom: 25px;">
    @if (bundle is not null)
    {
        <div class="container" style="background-color: white">
            <div class="content rounded-3 shadow">
                <center>
                    <h2>@bundle.Name</h2>
                    <p>@bundle.Name is good through @bundle.EndDate</p>
                </center>
                <hr />
                <div class="row">
                    <div class="col-md-6 d-grid justify-content-center align-items-center">
                        <img width="500" src="Images/My_Sanpete.png" class="img-fluid img rounded-circle mb-10" />
                    </div>
                    <div class="col-md-6">
                        @foreach (var voucher in bundle!.Vouchers!)
                        {
                            @if (voucher is not null)
                            {
                                <RazorClassLibrary.Components.VoucherComponent thisVoucher="@voucher" showPrice="false"></RazorClassLibrary.Components.VoucherComponent>
                                <br />
                            }
                        }
                        <div class="mb-10 mt-10">
                            <h3>$@bundle.FinalPrice</h3>
                            <form method="post" @formname="checkout" @onsubmit="Checkout" class="d-flex justify-content-center align-items-center">
                                <button type="submit" class="btn btn-primary">
                                    Checkout with Stripe
                                </button>
                                <AntiforgeryToken />
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>This voucher doesn't exist anymore (or never existed at all!).</p>
        <p>View All Vouchers</p>
    }
</div>

<style>
    .btn {
        background-color: black;
        color: white;
        border-radius: 30px;
        border: none;
        padding: 10px;
    }

        .btn:hover {
            background-color: white;
            color: black;
            border: black solid 1px;
        }

</style>

@code {
    [Parameter]
    public int bundleId { get; set; }

    public BundleDTO? bundle { get; set; }

    public string errorMessage { get; set; } = "";
    public string? authId { get; set; }

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateTask is null)
        {
            throw new Exception("BWAH");
        }
        var authState = await AuthStateTask;

        try
        {
            authId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;

            if (authId is null)
            {
                throw new Exception("User was not found");
            }

            bundle = await bundleService.GetBundle(bundleId);
        }
        catch (Exception)
        {
            navManager.NavigateTo("/404", true);
        }

    }

    private async Task Checkout()
    {
        try
        {
            if (bundle is null)
            {
                throw new Exception("Bundle wasn't found you can't check out");
            }

            PurchaseBundleRequest request = new()
                {
                    BundleId = bundle.Id,
                    UserId = authId,
                    PriceId = bundle.PriceId,
                };

            if (request is null)
            {
                throw new Exception("The add bundle request was null and couldn't be added");
            }

            await stripeService.BundleCheckout(request);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}

@page "/add-voucher/{Success}"
@page "/add-voucher"

@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services
@using Stripe

@inject IVoucherService voucherService
@inject IBusinessService businessService
@inject NavigationManager navManager;
@attribute [Authorize(Roles = "Admin")]


<div class="form-container">
    <h3>Admin Add Voucher</h3>
    <form class="mt-5" onsubmit="return false">
        <div class="form-group mt-5">
            <label for="title">Business Name</label>
            <select id="title" class="form-control" @bind="BusinessName" required>
                @if (AllBusinesses is not null)
                {
                    <option value="">Choose a business</option>
                    @foreach (var business in AllBusinesses)
                    {
                        <option value="@business.BusinessName">@business.BusinessName</option>
                    }
                }
            </select>
        </div>
        <div class="form-group mt-5">
            <label for="startDate">Start Date</label>
            <input id="startDate" type="datetime-local" class="form-control" @bind="StartDate" required />
        </div>
        <div class="form-group mt-5">
            <label for="endDate">End Date</label>
            <input id="endDate" type="datetime-local" class="form-control" @bind="EndDate" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Promo Code</label>
            <input id="title" class="form-control" @bind="PromoCode" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Promo Name</label>
            <input id="title" class="form-control" @bind="PromoName" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Promo Description</label>
            <input id="title" class="form-control" @bind="PromoDescription" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Promo Stock (Leave 0 for no limit)</label>
            <input id="title" class="form-control" @bind="PromoStock" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Retail Price (Leave 0 for no limit)</label>
            <input id="title" class="form-control" @bind="RetailPrice" required />
        </div>
        <div class="form-group mt-5">
            <label for="title">Total Reclaimable (Leave 0 for no limit)</label>
            <input id="title" class="form-control" @bind="TotalReclaimable" required />
        </div>
        @if (errorMessage == "")
        {
            <button type="submit" class="btn btn-primary" @onclick="CreateNewVoucher">Submit</button>
        }
        else
        {
            <div class="alert alert-danger">
                <p>Please fix the error to submit the form</p>
                <p>@errorMessage</p>
                <button type="submit" class="btn btn-primary" @onclick="CreateNewVoucher">Submit</button>
            </div>
        }
    </form>

    @if (Success == "true")
    {
        <div class="alert-success alert alert-dismissible fade show" role="alert" @onclick="ChangeSuccess">
            <p>You successfully added the last voucher!</p>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

</div>

@code {
    public AddVoucherRequest? newVoucher;
    public Business selectedBusiness { get; set; } = new();

    public string errorMessage = "";
    [Parameter]
    public string? Success { get; set; } 

    public string BusinessName { get; set; } = "";
    public DateTime StartDate { get; set; } = DateTime.Today.ToUniversalTime();
    public DateTime EndDate { get; set; } = DateTime.Today.ToUniversalTime();
    public string? PromoCode { get; set; } = "Default Promo";
    public string? PromoDescription { get; set; } = "Default Description";
    public string? PromoName { get; set; } = "Default Promo Name";
    public int PromoStock { get; set; }
    public Decimal RetailPrice { get; set; }
    public int TotalReclaimable { get; set; }

    public IEnumerable<Business>? AllBusinesses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newVoucher = new();

        AllBusinesses = await businessService.GetAllBusinesses();

    }

    public async Task CreateNewVoucher()
    {
        try
        {
            if (PromoCode is null || PromoDescription is null || PromoName is null)
            {
                throw new Exception("You need to fully fill out all the details for the Promo");
            }

            if (PromoCode == "Default Promo")
            {
                throw new Exception("You need to change the promo code from the default");
            }

            if (PromoDescription == "Default Description")
            {
                throw new Exception("You need to change the promo description from the default");
            }

            if (PromoName == "Default Promo Name")
            {
                throw new Exception("You need to change the promo name from the default");
            }

            if (PromoStock < 0)
            {
                throw new Exception("You need to give promo stock a value above or equal to 0");
            }

            if (RetailPrice < 0)
            {
                throw new Exception("You need to give retail price a value above or equal to 0");
            }

            if (TotalReclaimable < 0)
            {
                throw new Exception("You need to give total reclaimable to a value above or equal to 0");
            }

            if (EndDate <= StartDate)
            {
                throw new Exception("You need to make the end date further in the future than the start date");
            }

            selectedBusiness = AllBusinesses.Where(x => x.BusinessName == BusinessName).FirstOrDefault();

            if (selectedBusiness is null)
            {
                throw new Exception("You need to select a business for this voucher");
            }


            newVoucher = new AddVoucherRequest()
            {
                BusinessId = selectedBusiness.Id,
                StartDate = StartDate.ToUniversalTime(),
                EndDate = EndDate.ToUniversalTime(),
                PromoCode = PromoCode,
                PromoDescription = PromoDescription,
                PromoName = PromoName,
                PromoStock = PromoStock,
                RetailPrice = RetailPrice,
                TotalReclaimable = TotalReclaimable,
            };



            try
            {
                if (newVoucher is not null)
                {
                    AddProductToStripe();

                    await voucherService.AddVoucher(newVoucher);

                    // Clear the form
                    newVoucher = new AddVoucherRequest();
                    errorMessage = "";

                    Success = "true";
                    ReloadPage();
                }
                else
                {
                    throw new Exception("Whoops something didn't work");
                }
            }
            catch (Exception ex)
            {
                // Handle errors appropriately
                errorMessage = ex.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public void ReloadPage()
    {
        navManager.NavigateTo($"/add-voucher/{Success}", true);
    }

    public void ChangeSuccess()
    {
        Success = "false";
    }

    public void AddProductToStripe()
    {
        var options = new ProductCreateOptions { Name = PromoName, Description = PromoDescription };
        var service = new ProductService();
        service.Create(options);
    }

    public string ByteArrayToImage()
    {
        try
        {
            string imageString = Convert.ToBase64String(selectedBusiness.Logo);
            return string.Format("data:image/png;base64,{0}", imageString);

        }
        catch (Exception ex)
        {
            return "";
        }
    }

}
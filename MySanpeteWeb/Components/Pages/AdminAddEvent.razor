@page "/add-event"
@using FluentValidation

<h3>Admin Add Event</h3>


<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <!-- Drop down menu to select business -->
            <MudTd DataLabel="Business">
                <MudForm Model="@context">
                    <MudNumericField Label="Enter Business"
                                     @bind-Value="context.Business"
                                     Validation=@(orderDetailsValidator.ValidateValue)
                                     For="(() => context.Business)" />
                </MudForm>
            </MudTd>

            <MudTextField @bind-Value="model.Title"
                          For="@(() => model.Title)"
                          Immediate="true"
                          Label="Event Title" />

            <MudTextField @bind-Value="model.Description"
                          For="@(() => model.Description)"
                          Immediate="true"
                          Label="Event Description" />

            <MudTextField @bind-Value="model.Location"
                          For="@(() => model.Location)"
                          Immediate="true"
                          Label="Address" />

        </MudCardContent>
        <MudCardContent Class="pa-0">

            <MudTable Items="@model.OrderDetails" Hover="true" Breakpoint="Breakpoint.None" Dense="@true" Elevation="0">
                <HeaderContent>
                    <MudTh>Start Date</MudTh>
                    <MudTh>End Date (optional)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Start Date">
                        <MudDatePicker Label="Start Date" />
                    </MudTd>
                    <MudTd DataLabel="End Date">
                        <MudDatePicker Label="End Date" />
                    </MudTd>
                </RowTemplate>
            </MudTable>

        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Order</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Inject] ISnackbar Snackbar { get; set; }

    MudForm form;

    OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    OrderDetailsModelFluentValidator orderDetailsValidator = new OrderDetailsModelFluentValidator();

    OrderModel model = new OrderModel();

    // TODO: REMOVE THIS ONCE WE HAVE SCAFFOLDED THE DB
    public class OrderModel
    {
        public string Business { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; }
        public string Location { get; set; }
        public AddressModel Address { get; set; } = new AddressModel();
        public List<OrderDetailsModel> OrderDetails = new List<OrderDetailsModel>()
        {
            new OrderDetailsModel()
                {
                    Description = "Perform Work order 1",
                    Offer = 100
                },
            new OrderDetailsModel()
        };
    }

    public class AddressModel
    {
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }

    public class OrderDetailsModel
    {
        public string Description { get; set; }
        public decimal Offer { get; set; }
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submited!");
        }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="OrderModel"></typeparam>
    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Title)
                .NotEmpty();

            RuleFor(x => x.Description)
                .NotEmpty();

            RuleFor(x => x.Location)
                .NotEmpty();

            RuleForEach(x => x.OrderDetails)
                .SetValidator(new OrderDetailsModelFluentValidator());
        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            await Task.Delay(2000);
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    /// <summary>
    /// A standard AbstractValidator for the Collection Object
    /// </summary>
    /// <typeparam name="OrderDetailsModel"></typeparam>
    public class OrderDetailsModelFluentValidator : AbstractValidator<OrderDetailsModel>
    {
        public OrderDetailsModelFluentValidator()
        {
            RuleFor(x => x.Description)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Offer)
                .GreaterThan(0)
                .LessThan(999);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderDetailsModel>.CreateWithOptions((OrderDetailsModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}

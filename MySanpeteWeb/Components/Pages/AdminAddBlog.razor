@page "/add-blog"
@using Blazored.TextEditor
@using RazorClassLibrary.Data
@using RazorClassLibrary.Requests
@using RazorClassLibrary.Services

@inject IUserService userService;
@inject IBlogService blogService;


<div class="form-container">
    <h3>Admin Add Blog</h3>
    <form method="post" @onsubmit="CreateNewBlog" class="mt-5">
        <div class="form-group mt-5">
            <label for="author">Author</label>
            <select id="author" class="form-control" @bind="AuthorId" required>
                @if (PotentialAuthors is not null)
                {
                    <option value="">Choose the author...</option>
                    @foreach (var author in PotentialAuthors)
                    {
                        <option value="@author.Id">@author.Username</option>
                    }
                }
            </select>
        </div>
        <div class="form-group mt-5">
            <label for="startDate">Allow Comments?</label><br />
            <label for="radioTrue">Yes</label>
            <input type="radio" id="radioTrue" name="myRadio" @onchange="@(e => Commentable = true)" checked="@(Commentable == true)"/>
            <label for="radioFalse">No</label>
            <input type="radio" id="radioFalse" name="myRadio" @onchange="@(e => Commentable = false)" checked="@(Commentable == false)" />
        </div>
        <div class="form-group">
            <label for="photo">Add a Thumnail Image</label>
            <small style="color: darkgray;"><br />Recommended image size of 500 X 750 pixels. If no image is provided, MySanpete Logo will be displayed.<br /></small>
            <InputFile OnChange="SaveFile"></InputFile>
        </div>

        <div class="form-group mt-5">
            <label for="title">Title</label>
            <input id="title" class="form-control" @bind="Title" />
        </div>

        <BlazoredTextEditor @ref="@QuillHtml">
            <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-link"></button>
                </span>
            </ToolbarContent>
            <EditorContent>

            </EditorContent>
        </BlazoredTextEditor>
        <button type="submit" class="btn btn-primary mt-5">Add Blog</button>
        <button class="btn btn-secondary mt-5" @onclick="GetHTML">Generate Preview</button>
    </form>
</div>

<div>
    @if (QuillHTMLContent is not null)
    {
        <h1>@Title</h1>
        <p></p>
        @((MarkupString)QuillHTMLContent)
    }
</div>

@code {
    BlazoredTextEditor QuillHtml;

    string QuillHTMLContent;
    public AddBlogRequest? newBlog;

    public string errorMessage = "";

    public string? Title { get; set; }
    public string? Content { get; set; }
    public int AuthorId { get; set; }
    public bool Commentable { get; set; }

    public string? Message { get; set; }
    public byte[]? ImageBytes { get; set; }

    public List<UserDTO> PotentialAuthors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PotentialAuthors = await userService.GetAllUsers();
        newBlog = new();
    }

    public async Task CreateNewBlog()
    {
        GetHTML();
        newBlog.Title = Title;
        newBlog.AuthorId = AuthorId;
        newBlog.Content = QuillHTMLContent;
        newBlog.Commentable = Commentable;
        newBlog.Photo = ImageBytes;

        try
        {
            if (newBlog is not null)
            {
                var returnBlog = await blogService.AddBlog(newBlog);

                if (returnBlog is not null)
                {

                }
            }
        }
        catch (Exception ex)
        {
            // Handle errors appropriately
            errorMessage = ex.Message;
        }
    }

    public async void GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        StateHasChanged();
    }


    public async Task SaveFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.GetMultipleFiles(1).Single();

        using (var ms = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(ms);
            ImageBytes = ms.ToArray();
        }
    }

}
@layout MySanpeteWeb.Components.Layout.AlternateLayout
@page "/vouchers"

@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@using MySanpeteWeb.Data

@inject IVoucherService voucherService
@inject NavigationManager NavMan
@inject IBusinessService businessService
@inject IBundleService bundleService

<div class="main-section">
    <div class="content">
        <div class="title">
            Vouchers for all occasions.
        </div>
    </div>
    <img class="full-screen-image" src="Images/social_gathering.jpg" alt="Image">
    <div class="vouchers-content" style="max-width: 100vw; margin-left: auto; margin-right: auto; background-color:#fcfcf8; justify-content: center;">
        <div class="d-flex flex-row justify-content-center flex-wrap" style="max-width: 100vw;">
            @if (!isLoading)
            {
                @if (allBusinesses is not null)
                {
                    @foreach (var b in allBusinesses)
                    {
                        @if (b.LogoURL is not null && b.BusinessName is not null)
                        {
                            <div>
                                <a @onclick="() => toggleFiltering(b.BusinessName)">
                                    <img class="@(b.BusinessName == filteredBusiness ? "filtered" : "non-filtered")"
                                         src="@b.LogoURL" alt="@b.BusinessName Logo" title="@b.BusinessName" />
                                </a>
                            </div>
                        }
                        else
                        {
                            <div>
                                <a href="#">
                                    <div class="business-logo"
                                         style="height: 130px; width: 130px; border-radius: 65px; object-fit: cover; object-position: center; margin: 20px; color: white; background-color: dimgray;">
                                        <p class="text-center align-content-center">@b.BusinessName</p>
                                    </div>
                                </a>
                            </div>
                        }
                    }
                }
            }
            else
            {
                <RazorClassLibrary.Pages.LoadingComponent></RazorClassLibrary.Pages.LoadingComponent>
            }
        </div>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="input-group mb-3 pt-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text bg-light rounded-left">
                                <img src="Images/MagnifyingGlass.png" alt="Search" style="width: 20px; height: 20px;" />
                            </span>
                        </div>
                        <input type="text" class="form-control rounded-right" placeholder="Search All Vouchers (e.g. Wendys, Free, WAH)" @onchange="@FilterVouchers" />
                    </div>
                </div>
            </div>
        </div>
        <div class="card-container row mt-5 pb-8" style="max-width: 1500px; margin-left: auto; margin-right: auto">
            @if (!isLoading)
            {
                @if (allVouchers.Count > 0)
                {
                    @if (!filtering)
                    {
                        if(!filteringTooSpecific)
                        {
                            @foreach (var voucher in searchedVouchers)
                            {
                                @if (voucher.IsBundle == false && voucher.IsActive == true)
                                {
                                    <div class="col-md-6 p-3">
                                        <RazorClassLibrary.Components.VoucherComponent thisVoucher="@voucher" showPrice="true"></RazorClassLibrary.Components.VoucherComponent>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <div class="alert alert-info">Nothing matched your search.</div>
                        }

                    }
                    else
                    {
                        @foreach (var voucher in searchedVouchers.Where(x => x.BusinessName == filteredBusiness).ToList())
                        {
                            @if(voucher.IsBundle == false && voucher.IsActive == true)
                            {
                                <div class="col-md-6 p-3">
                                    <RazorClassLibrary.Components.VoucherComponent thisVoucher="@voucher" showPrice="true"></RazorClassLibrary.Components.VoucherComponent>
                                </div>
                            }
                        }
                        @if (filteringTooSpecific)
                        {
                            <div class="alert alert-info">Nothing matched your search.</div>
                        }
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <p>Sorry, there are no vouchers currently. </p>
                    </div>
                }
            }
        </div>
        <hr />
        <center><h2>Bundles</h2></center>
        <div class="card-container row mt-5" style="max-width: 1500px; margin-left: auto; margin-right: auto">
            @if (allBundles is not null)
            {
                @foreach (var bundle in allBundles)
                {
                    <div class="col-md-6 p-3">
                        <RazorClassLibrary.Components.BundleComponent thisBundle="@bundle"></RazorClassLibrary.Components.BundleComponent>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info">
                    <p>Sorry, there are no bundles currently. </p>
                </div>

            }

        </div>
    </div>
</div>

@code {
    public List<VoucherDTO> allVouchers { get; set; } = new();
    public List<VoucherDTO> searchedVouchers { get; set; } = new();
    public List<BundleDTO> allBundles { get; set; } = new();

    public string filteredBusiness { get; set; } = "none";
    public List<BusinessDTO> allBusinesses { get; set; } = new();
    public bool isLoading { get; set; } = true;
    public bool filtering { get; set; } = false;
    public bool filteringTooSpecific { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        MySanpeteMetrics.VoucherPageHitCount.Add(1);


        isLoading = true;
        allVouchers = await voucherService.GetAllVouchers();
        searchedVouchers = allVouchers = allVouchers.Where(x => x.EndDate >= DateTime.UtcNow).ToList();
        allBusinesses = await businessService.GetAllBusinesses();
        allBundles = (await bundleService.GetAllBundles()).Where(x => x.Name != "[Removed]").ToList();
        isLoading = false;
    }

    public void GoToDetailsPage(int id)
    {
        NavMan.NavigateTo($"/view-voucher/{id}", true);
    }

    public void GoToBundlesPage(int id)
    {
        NavMan.NavigateTo($"/purchase-bundle/{id}", true);
    }

    public void toggleFiltering(string businessName)
    {
        if (filteredBusiness == businessName)
        {
            filtering = !filtering;
            filteredBusiness = "none";
        }
        else
        {
            filtering = true;
            filteredBusiness = businessName;
        }
    }

    private void FilterVouchers(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        filteringTooSpecific = false;
        string searchString = ((string)args.Value!).ToLower();

        searchedVouchers = allVouchers.Where(x =>
        {
            return x.PromoName!.ToLower().Contains(searchString)
            || x.BusinessName!.ToLower().Contains(searchString)
            || x.PromoDescription!.ToLower().Contains(searchString);
        }).ToList();

        if (searchedVouchers.Count <= 0)
        {
            filteringTooSpecific = true;
        }
        StateHasChanged();
    }
}

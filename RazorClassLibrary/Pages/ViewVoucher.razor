@using RazorClassLibrary.DTOs

@inject IVoucherService service
@inject IBusinessService businessService

<h1>Razor Class Library</h1>
@if (voucher is not null)
{
    <div class="container">
        <div class="content">
            <div class="row">
                <div class="col-md-6">
                    <img width="300" src="@imgDataURL" />
                </div>
                <div class="col-md-6">
                    <h2>@voucher.PromoName</h2>
                    <p>@voucher.BusinessName</p>
                    <p>@voucher.PromoDescription</p>
                    <p>@voucher.RetailPrice</p>
                    <p>@voucher.EndDate</p>
                </div>
                <div class="button" >
                    <div class="button-wrapper">
                        <div class="text">Buy Now</div>
                        <span class="icon">
                            <svg viewBox="0 0 16 16" class="bi bi-cart2" fill="currentColor" height="16" width="16" xmlns="http://www.w3.org/2000/svg">
                                <path d="M0 2.5A.5.5 0 0 1 .5 2H2a.5.5 0 0 1 .485.379L2.89 4H14.5a.5.5 0 0 1 .485.621l-1.5 6A.5.5 0 0 1 13 11H4a.5.5 0 0 1-.485-.379L1.61 3H.5a.5.5 0 0 1-.5-.5zM3.14 5l1.25 5h8.22l1.25-5H3.14zM5 13a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm9-1a1 1 0 1 0 0 2 1 1 0 0 0 0-2zm-2 1a2 2 0 1 1 4 0 2 2 0 0 1-4 0z"></path>
                            </svg>
                        </span>
                    </div>
                </div>
                <form method="post" @formname="checkout" >
                    <button type="submit" class="btn btn-primary">
                        Place Order
                    </button>
                    <AntiforgeryToken />
                </form>
            </div>
        </div>
    </div>
}
else
{
    <p>This voucher doesn't exist anymore (or never existed at all!).</p>
    <p>View All Vouchers</p>
}

@code {
    [Parameter]
    public int voucherId { get; set; }

    public VoucherDTO voucher { get; set; }
    public Business business { get; set; }
    public string imgDataURL { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        voucher = await service.GetVoucher(voucherId) ?? new VoucherDTO();
        var businesses = await businessService.GetAllBusinesses();
        business = businesses.Where(x => x.BusinessName == voucher.BusinessName).FirstOrDefault();

        if (business.Logo is not null)
        {
            ByteArrayToImage();
        }
    }

    public void ByteArrayToImage()
    {
        try
        {
            string imageString = Convert.ToBase64String(business.Logo);
            imgDataURL = string.Format("data:image/png;base64,{0}", imageString);

        }
        catch (Exception ex)
        {

        }
    }


}

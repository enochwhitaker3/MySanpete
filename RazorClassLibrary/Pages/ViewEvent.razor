@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using RazorClassLibrary.Requests

@inject IOccasionService occasionService
@inject IUserOccasionService userOccassionService
@inject IUserService userService
@* @inject IGoogleApiService googleApiService *@
@inject NavigationManager navManager

@attribute [Authorize]

<div class="container">
    @if (isLoading)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        @if (errorMessage == "")
        {
            @if (Event is not null && Event.Business is not null && Event is not null)
            {
                @if (Success)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        <h4 class="alert-heading">Success</h4>
                        <p>You have successfully subscribed to @Event.Title</p>
                        <button type="button" class="close" data-dismiss="alert" style="background-color: transparent !important;">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                }

                <div class="container">
                    <div class="content rounded-3 shadow">
                        <div class="row">
                            <div class="col-md-6">
                                <img width="300" src="@Event.PhotoURL" style="height: 90%; width: 90%; padding-left: 20px; padding-right: 20px; padding-top: 10px" />
                            </div>
                            <div class="col-md-6 p-3" style="padding: 15px;">
                                <h2>@Event.Title</h2>
                                <strong><p>Hosted by @Event!.Business.BusinessName</p></strong>
                                <p>@Event.Description</p>
                                <p>Taking place at: @Address</p>
                                <p>@Event.StartDate.ToString("MMMM") @Event.StartDate.Day, @Event.StartDate.Year @Event.StartDate.ToString("h:mm tt") through @Event.EndDate.ToString("MMMM") @Event.EndDate.Day, @Event.EndDate.Year @Event.EndDate.ToString("h:mm tt")</p>
                                @if (authId is not null)
                                {

                                    <button type="submit" class="btn btn-primary" @onclick="Subscribe">
                                        Subscribe to @Event.Title
                                    </button>
                                }
                                else
                                {
                                    <p>Log in to save this event.</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <br>
            }
        }
        else
        {
            <div class="container">
                <p>There was an error</p>
                <p>@errorMessage</p>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int EventId { get; set; }

    public OccasionDTO? Event { get; set; } = new();
    public UserDTO? currentUser { get; set; } = new();

    public string? authId { get; set; }
    public string? Address { get; set; } = "";
    public string? errorMessage { get; set; } = "";

    public bool Success { get; set; } = false;
    public bool isLoading { get; set; } = true;

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Event = await occasionService.GetOccasion(EventId);

        await TryToAuthenticateUser();

        isLoading = false;
    }

    public async Task TryToAuthenticateUser()
    {
        if (AuthStateTask is null)
        {
            throw new Exception("User State Task was null");
        }

        var authState = await AuthStateTask;
        if (authState.User!.Identity!.IsAuthenticated != true)
        {
            isLoading = false;
            return;
        }

        try
        {
            authId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;
            currentUser = await userService.GetAuthUser(authId!);
            // if (Event is not null &&
            //     Event.YCoordinate is not null &&
            //     Event.XCoordinate is not null)
            // {
            //     Address = (await googleApiService.GetAddressOfLatLon(Event.XCoordinate, Event.YCoordinate));
            // }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async void Subscribe()
    {
        Success = false;
        if (EventId <= 0)
        {
            throw new Exception("Event did not exist had too low of an ID");
        }
        if (currentUser!.Id <= 0)
        {
            throw new Exception("User did not exist had too low of an ID");
        }

        var userOccasion = new AddUserOccasionRequest()
            {
                OccasionId = EventId,
                UserId = currentUser.Id
            };

        await userOccassionService.AddNewUserOccasion(userOccasion);
        Success = true;
        StateHasChanged();
    }

}

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IUserVoucherService userVoucherService
@inject IUserService userService
@inject NavigationManager navManager

@attribute [Authorize]

<div>
    <center class="my-6"><h3><strong>My Vouchers</strong></h3></center>
    @if (isLoading)
    {
        <LoadingComponent></LoadingComponent>
    }
    else
    {
        @if (allUserVouchers!.Count == 0)
        {
            <div class="mx-auto w-75" style="margin-bottom: 20px;">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">No vouchers to show</h5>
                        <p class="card-text">Go to our website to purchase voucher to use around Sanpete!</p>
                        <a href="/Vouchers" class="btn btn-primary">Find Vouchers</a>
                    </div>
                </div>
            </div>
        }

        <div class="mx-auto w-75">
            @foreach (var userVoucher in allUserVouchers.OrderBy(x => x.Is_Used)!)
            {
                @if (userVoucher.Is_Used == false)
                {
                    <div>
                        <div class="card mb-6 shadow" style="border: none;">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title"><strong>@userVoucher!.Voucher!.PromoName</strong></h5>

                                    <p>@userVoucher.Voucher.BusinessName</p>
                                    <p>Good Through @userVoucher.Voucher.StartDate to @userVoucher.Voucher.EndDate</p>

                                    <button class="btn btn-primary" style="text-align: right;" @onclick="()=> GoToDetailsPage(userVoucher.Id)">View Voucher</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <div class="card mb-6 shadow" style="border: none;">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title" style="color: gray;"><strong>@userVoucher!.Voucher!.PromoName (used)</strong></h5>

                                    <p style="color: gray">@userVoucher.Voucher.BusinessName</p>
                                    <p>Good Through @userVoucher.Voucher.StartDate to @userVoucher.Voucher.EndDate</p>

                                    <p>Purchased on @userVoucher.Purchase_Date</p>
                                    <p>Used on @userVoucher.Last_Updated</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>


@code {
    public List<UserVoucherDTO>? allUserVouchers { get; set; } = new();
    public UserDTO? currentUser { get; set; } = new();
    public string? authId { get; set; }

    public string errorMessage { get; set; } = "";
    public bool isLoading { get; set; } = false;

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (AuthStateTask is null)
        {
            throw new Exception("User State Task was null");
        }
        var authState = await AuthStateTask;
        try
        {
            authId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;
            if (authId is null)
            {
                throw new Exception("User was not found");
            }
        }
        catch (Exception)
        {
            navManager.NavigateTo("/", true);
        }

        currentUser = await userService.GetAuthUser(authId!);
        if (currentUser is not null)
        {
            allUserVouchers = await userVoucherService.GetAllByUser(currentUser.Id);

        }

        if (allUserVouchers is null)
        {
            throw new Exception("No vouchers found");
        }

        var freebies = allUserVouchers
                .Where(x => x.Charge_Id == "Free Voucher Claimed")
                .ToList();
        allUserVouchers = allUserVouchers
            .Where(x => x.User!.Id == currentUser!.Id)
            .GroupBy(x => x.Charge_Id)
            .Where(x => x.Count() <= 1)
            .Select(x => x.First())
            .ToList();

        allUserVouchers.AddRange(freebies);

        allUserVouchers.OrderByDescending(x => x.Is_Used);

        isLoading = false;
    }

    public void GoToDetailsPage(int id)
    {
        navManager.NavigateTo($"/view-user-voucher/{id}", true);
    }
}

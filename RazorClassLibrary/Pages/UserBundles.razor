@page "/user-bundles"

@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService userService
@inject IUserVoucherService userVoucherService
@inject NavigationManager navManager

@foreach(var group in allBundles)
{
    <div style="background-color: lightgray">
    @foreach(var voucher in group)
    {
            <div>
                <div class="card mb-6 shadow" style="border: none;">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title"><strong>@voucher!.Voucher!.PromoName</strong></h5>

                            <p>@voucher.Voucher.BusinessName</p>
                            <p>Good Through @voucher.Voucher.StartDate to @voucher.Voucher.EndDate</p>


                        </div>
                    </div>
                </div>
            </div>
    }
    <button class="btn btn-primary" style="text-align: right;" @onclick="()=> GoToDetailsPage(group!.Key!)">View Bundle</button>
    </div>
    <br/>
}

@code
{
    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    List<IGrouping<string?, UserVoucherDTO>> allBundles { get; set; } = new();

    protected async override Task OnInitializedAsync()
    {
        if(AuthStateTask is null)
        {
            return;
        }
        var authState = await AuthStateTask;
        var authId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;
        var userId = (await userService.GetAuthUser(authId) ?? new UserDTO()).Id;
        var userVouchers = await userVoucherService.GetAllByUser(userId);
        allBundles = userVouchers.Where(v => v.Charge_Id != "Free Voucher Claimed").GroupBy(b => b.Charge_Id).Where(g => g.Count() > 1).ToList();

    }

    public void GoToDetailsPage(string id)
    {
        navManager.NavigateTo($"/view-user-bundle?Id={id}", true);
    }
}
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IUserOccasionService userOccasionService
@inject IUserService userService
@inject NavigationManager navManager
@inject IGoogleApiService googleApiService


@attribute [Authorize]

@if (isLoading)
{
    <LoadingComponent></LoadingComponent>
}
else
{
    @if (Success)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <h4 class="alert-heading">Success</h4>
            <p>You have successfully unsubscribed from </p>
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }

    @if (selectedUserOccasion is not null && Address is not null)
    {
        <div class="container">
            <div class="content">
                <div class="row">
                    <div class="col-md-6" style="padding-bottom: 10px;">
                        <img width="350" src="@imgDataURL">
                    </div>
                    <div class="col-md-6">
                        <h2>@selectedUserOccasion!.Occasion!.Title</h2>
                        <p>Put on by: @selectedUserOccasion!.Occasion!.Business!.BusinessName</p>
                        <p>@selectedUserOccasion.Occasion.Description</p>
                        <p>Starting: @selectedUserOccasion.Occasion.StartDate.ToString("MMMM dd yyyy hh:mm tt") Ending: @selectedUserOccasion.Occasion.EndDate.ToString("MMMM dd yyyy hh:mm tt")</p>
                        <p>Located at: @Address</p>

                        @if (errorMessage == "")
                        {
                            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#refundModal">Unsubscribe</button>
                        }
                        else
                        {
                            <div class="alert alert-danger">
                                <p>Please fix the error to refund voucher</p>
                                <p>@errorMessage</p>
                                <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#refundModal">Unsubscribe</button>
                            </div>
                        }

                        <div class="modal fade" id="refundModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">UnSubscribe from @selectedUserOccasion.Occasion.Title</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to unsubscribe from @selectedUserOccasion.Occasion.Title?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-danger" data-dismiss="modal" @onclick="UnSubscribe">Confirm</button>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    }
    else
    {

        <p>This occasion doesn't exist anymore (or never existed at all!).</p>
        <button class="btn-primary" @onclick="() => NavigateToAllOccasions()"></button>
        <p>View All Of Your Occasions</p>
    }
}

@code {
    [Parameter]
    public int userOccasionId { get; set; }

    [Parameter]
    public string? authId { get; set; }
    public string? imgDataURL { get; set; } = "";
    public string? errorMessage { get; set; } = "";
    public string? Address { get; set; } = "";

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }

    public bool isLoading { get; set; } = true;
    public bool Success { get; set; } = false;

    public UserOccasionDTO? selectedUserOccasion { get; set; }
    public UserDTO? currentUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (AuthStateTask is null)
        {
            throw new Exception("BWAH");
        }
        var authState = await AuthStateTask;
        try
        {
            if (authId == null)
            {
                authId = authState.User.Claims.FirstOrDefault(x => x.Type == "authId")!.Value;
            }

            if (authId is null)
            {
                throw new Exception("User was not found");
            }

            var userId = (await userService.GetAuthUser(authId))!.Id;

            currentUser = await userService.GetAuthUser(authId!);
            selectedUserOccasion = await userOccasionService.GetUserOccasion(userOccasionId);
            if (selectedUserOccasion is not null &&
                selectedUserOccasion.Occasion is not null &&
                selectedUserOccasion.Occasion.YCoordinate is not null && 
                selectedUserOccasion.Occasion.XCoordinate is not null )
            {
                Address = (await googleApiService.GetAddressOfLatLon(selectedUserOccasion.Occasion.XCoordinate, selectedUserOccasion.Occasion.YCoordinate));
            }
            imgDataURL = selectedUserOccasion!.Occasion!.PhotoURL;
            isLoading = false;
        }
        catch (Exception)
        {
            navManager.NavigateTo("/404", true);
        }
        isLoading = false;
    }

    public void NavigateToAllOccasions()
    {
        navManager.NavigateTo("/user-occasions", true);
    }

    public async void UnSubscribe()
    {
        try
        {
            if (selectedUserOccasion is null)
            {
                throw new Exception("User occasion didn't exist");
            }

            var result = await userOccasionService.DeleteUserOccasion(selectedUserOccasion.Id);

            if (result == false)
            {
                throw new Exception($"Unable to unsubscribe from {selectedUserOccasion!.Occasion!.Title}");
            }

            errorMessage = "";
            Success = true;
            StateHasChanged();
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}

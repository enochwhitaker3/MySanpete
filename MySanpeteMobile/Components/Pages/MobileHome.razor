@page "/"

@layout MySanpeteMobile.Components.Layout.MainLayout
@inject IJSRuntime JSRuntime
@inject IOccasionService occasionService
@inject IBusinessService businessService


@using System.Security.Claims
@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@using System.Text.Json

@inject NavigationManager NavMan

@if(isLoading)
{
    <RazorClassLibrary.Pages.LoadingComponent />
}
else
{

<div id="mapDiv" style="width:100vw;height:90vh;"></div>


<div class="container-fluid scroll-container">
    <div class="row flex-row flex-nowrap">
        @foreach (var o in AllOccasions)
        {
            <div class="col">
                <div class="card card-block h-100 p-4" @onclick="() => focusMap(o.YCoordinate, o.XCoordinate)">
                    <h1 style="font-size: 20px;">@o.Title</h1>
                    <h3 style="font-size: 15px;">@o.Business!.BusinessName</h3>
                    <p class="card-subtitle mb-2 text-muted">@o.EndDate</p>
                    <p>@o.Description</p>
                    <button class="p-1 px-3" style="border: 1px solid black; border-radius: 30px;" @onclick="() => NavigateToDetails(o.Id)"> View Details</button>
                </div>
            </div>
        }
      
    </div>
</div>
}

@code {
    [Parameter]
    public string? MapsKey { get; set; } = "Ku8vCROlGuzvfRtDnZP_8IHpn_hyAZ56EQX1l0R9lJc";

    public List<OccasionDTO> AllOccasions { get; set; } = new();
    public List<BusinessDTO> AllBusinesses { get; set; } = new();
    public BusinessDTO SelectedBusiness { get; set; } = new();
    public bool isLoading { get; set; } = true;

    public string? jsonOccasions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        AllBusinesses = await businessService.GetAllBusinesses();
        AllOccasions = await occasionService.GetAllOcassions();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isLoading = true;
        AllBusinesses = await businessService.GetAllBusinesses();
        AllOccasions = await occasionService.GetAllOcassions();
        jsonOccasions = JsonSerializer.Serialize(AllOccasions);
        var jsonBusiness = JsonSerializer.Serialize(AllBusinesses);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", MapsKey, jsonOccasions, jsonBusiness);
        }
        isLoading = false;
    }

    public async Task focusMap(decimal? yCoord, decimal? xCoord)
    {
        await JSRuntime.InvokeVoidAsync("focusMap", yCoord, xCoord);
    }

    public void NavigateToDetails(int id)
    {
        try
        {

            NavMan.NavigateTo($"/view-event/{id}", true);
        }
        catch (Exception ex)
        {
            
        }
    }
}

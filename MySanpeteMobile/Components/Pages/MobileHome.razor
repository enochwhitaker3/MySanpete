@page "/"

@layout MySanpeteMobile.Components.Layout.MainLayout
@inject IJSRuntime JSRuntime
@inject IOccasionService occasionService
@inject IBusinessService businessService


@using System.Security.Claims
@using RazorClassLibrary.DTOs
@using RazorClassLibrary.Data
@using RazorClassLibrary.Services
@using System.Text.Json

<div id="mapDiv" style="width:100vw;height:90vh;"></div>

@if(isLoading)
{
    <RazorClassLibrary.Pages.LoadingComponent></RazorClassLibrary.Pages.LoadingComponent>
}
else
{
    <div class="container-fluid scroll-container">
        <div class="row flex-row flex-nowrap">
            @foreach (var o in AllOccasions)
            {
                getBusinessName(o.BusinessId);
                <div class="col">
                    <div class="card card-block h-100 p-5" @onclick="() => focusMap(o.YCoordinate, o.XCoordinate)">
                        <h1>@o.Title</h1>
                        @if(SelectedBusiness.BusinessName is null)
                        {
                            <h2>Business Not Found</h2>
                        }
                        <h2>@SelectedBusiness.BusinessName</h2>
                        <p class="card-subtitle mb-2 text-muted">@o.EndDate</p>
                        <p>@o.Description</p>
                        <button class="btn" @onclick="() => NavigateToDetails(o.BusinessId)">View Details</button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string? MapsKey { get; set; } = "Ku8vCROlGuzvfRtDnZP_8IHpn_hyAZ56EQX1l0R9lJc";

    public List<OccasionDTO> AllOccasions { get; set; } = new();
    public List<BusinessDTO> AllBusinesses { get; set; } = new();
    public BusinessDTO SelectedBusiness { get; set; } = new();
    public bool isLoading { get; set; } = true;

    public string? jsonOccasions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        AllOccasions = await occasionService.GetAllOcassions();
        AllBusinesses = await businessService.GetAllBusinesses();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        AllOccasions = await occasionService.GetAllOcassions();
        AllBusinesses = await businessService.GetAllBusinesses();
        jsonOccasions = JsonSerializer.Serialize(AllOccasions);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMap", MapsKey, jsonOccasions);
        }
    }

    public async Task focusMap(decimal? yCoord, decimal? xCoord)
    {
        await JSRuntime.InvokeVoidAsync("focusMap", yCoord, xCoord);
    }

    public void getBusinessName(int businessID)
    {
        SelectedBusiness = AllBusinesses!.Where(x => x.Id == businessID)!.FirstOrDefault()!;
    }

    public void NavigateToDetails(int businessId)
    {
        // TODO go to details page
    }
}
